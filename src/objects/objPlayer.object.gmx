<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerHitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code optimization attempt for in-game gameplay
//You can read more about this here: http://www.yoyogames.com/blog/23
draw_texture_flush();
draw_sprite(sprPlayer, 0, 0, 0);
draw_sprite(sprPlayerHitbox, 0, 0, 0);
draw_sprite(sprPlayerCapsuleHitbox, 0, 0, 0);
draw_sprite(sprPlayer2, 0, 0, 0);
draw_sprite(sprOption, 0, 0, 0);
draw_sprite(sprLaser, 0, 0, 0);
draw_sprite(sprFrontShield, 0, 0, 0);
draw_sprite(sprForceField, 0, 0, 0);
draw_sprite(sprFont, 0, 0, 0);
draw_sprite(sprDouble, 0, 0, 0);
draw_sprite(sprBullet, 0, 0, 0);
draw_sprite(tileset1, 0, 0, 0);
draw_sprite(sprSpreadExplosion, 0, 0, 0);
draw_sprite(sprTwinLaser, 0, 0, 0);
draw_sprite(sprRippleLaser, 0, 0, 0);
draw_sprite(sprCapsule, 0, 0, 0);
draw_sprite(sprPowerupHUD, 0, 0, 0);
draw_sprite(sprFont, 0, 0, 0);


draw_sprite(spr16x16Explosion, 0, 0, 0);
draw_sprite(sprBean, 0, 0, 0);
draw_sprite(sprBossEye, 0, 0, 0);
draw_sprite(sprBossLaser, 0, 0, 0);
draw_sprite(sprDee01, 0, 0, 0);
draw_sprite(sprEnemyBullet, 0, 0, 0);
draw_sprite(sprLion, 0, 0, 0);
draw_sprite(sprBossBarrier, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize some variables
invincibilityFrames = 100; //How long we're invincible for. The resetPlayer() script resets this.
invBlinkRate = 3;
playerVisible = true;
flyingIn = -128;

movingVert=0;
movingHoriz=0;

shootDelayTimer=0;
shootCounter=0;
shootCounterMaxWithoutDouble=2;
shootCounterMaxWithDouble=1;
shootCounterMax=shootCounterMaxWithoutDouble;
missileDelayTimer=0;
missileCounter=0;
missileCounterMax=2;
shootDoubleDelayTimer=0;
shootDoubleCounter=0;
shootDoubleCounterMax=1;
//For lasers with shoot limits
shootLaserDelayTimer=0;
shootLaserCounter=0;
shootLaserCounterMax=2;

hsp=0;
vsp=0;

HP=1;               //Health points, or, in other words, Force Field
HPMax=6;            //Max amount of health the player can have (for Force Field Scaling. This number changes between 6 and 10 depending on Friendly Mode)
forceFrame = false; //lolbool animation for Force Field
forceFrameSpeed = 4; //Animation speed for Force field

image_speed=0;
shipTurning=0;
flameImgInd=0;
touchingWall=false;
turnMult=5; //Multiplies how long it takes for the ship to turn
flameIn=true; //Flag for ship flame animation
flameSpeed=3; //Ship flame animation speed
movingVert = 0;
movingHoriz = 0;

//Death-related variables
dead = false;
deadTimer = 0;
explode = false;
deadTimerMult = 4;      //Delay between each animation frame
deadWaitTime = 55;     //How long we should wait after the death animation

//Powerup-related variables
konCode = false; // :)
konDone = false;
konCodeLimit = 3; //Per game-over
fun = false;
callD = 0;
cc1=0;
cc2=0;
powerupSlot = 0;    //The powerup we currently have (0 means nothing)
playerSpeed = 1;
playerSpeedMax = 6;
hasMissile = false;
hasDouble = false;
hasLaser = false;
laserCooldownTimer = 0;
numOfOpts = 0;
optsMax = 4;
hasQuestion = false;
hasExclamation = false;
excTimer = 0;

myID = 0; //Only used to distinguish between the player and each Option

//Initialize prevX/prevY arrays with the player's initial position, for player trailing
for (var i = 39; i &gt; 0; i--;)
       {
       prevX[i] = x;
       prevY[i] = y;
       }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
